import {
    saveProfileImage,
    getProfileImage,
    getProfileImageMetadata,
    deleteProfileImage
} from '@/services/userService';
import { Controller } from '@/types';
import { User } from '@shared';

/**
 * Uploads or updates the profile image of the authenticated user
 * @param req Express request object with user ID and image file
 * @param res Express response object
 * @returns Updated profile image metadata if successful
 * @throws 401 if user is not authenticated
 * @throws 400 if image file is missing or invalid
 * @throws 500 if upload operation fails
 */
export const handleUploadProfileImage: Controller<User.ProfileImageMetadata> = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
            return
        }

        const userId = req.user.id;

        // Make sure we have a file to upload
        if (!req.file) {
            res.status(400).json({
                success: false,
                error: 'No image file provided'
            });
            return
        }

        // Extract file information
        const imageData = {
            id: '', // This will be generated by the service for new images
            filename: req.file.originalname,
            data: req.file.buffer,
            mimeType: req.file.mimetype,
            size: req.file.size
        };

        // Validate image type
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validImageTypes.includes(imageData.mimeType)) {
            res.status(400).json({
                success: false,
                error: 'Invalid image format. Supported formats: JPEG, PNG, GIF, WebP'
            });
            return
        }

        // Save the profile image
        const savedImage = await saveProfileImage(userId, imageData);

        res.status(200).json({
            success: true,
            message: 'Profile image uploaded successfully',
            data: savedImage
        });
    } catch (error) {
        console.error('Profile image upload error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to upload profile image'
        });
    }
};

interface ProfileImageResponse {
    dataUri: string;
    filename: string;
    mimeType: string;
    size: number;
}

/**
 * Retrieves the profile image of the authenticated user
 * @param req Express request object containing authenticated user details
 * @param res Express response object to send back the image data
 * @returns Profile image with binary data if successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if server encounters an error
 */
export const handleGetProfileImage: Controller<ProfileImageResponse> = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
            return;
        }

        const userId = req.user.id;

        try {
            const profileImage = await getProfileImage(userId);

            // Convert binary data to base64
            const base64Data = Buffer.from(profileImage.data).toString('base64');
            const dataUri = `data:${profileImage.mimeType};base64,${base64Data}`;

            res.status(200).json({
                success: true,
                data: {
                    dataUri,
                    filename: profileImage.filename,
                    mimeType: profileImage.mimeType,
                    size: profileImage.size
                },
                message: 'Profile image retrieved successfully'
            });

        } catch (error: any) {
            if (error.message === 'Profile image not found') {
                res.status(404).json({
                    success: false,
                    error: 'Profile image not found'
                });
                return;
            }
            throw error;
        }
    } catch (error) {
        console.error('Get profile image error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to retrieve profile image'
        });
    }
};

/**
 * Retrieves the metadata of the authenticated user's profile image
 * @param req Express request object containing authenticated user details
 * @param res Express response object
 * @returns Profile image metadata (without binary data) if successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if server encounters an error
 */
export const handleGetProfileImageMetadata: Controller<User.ProfileImageMetadata> = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
            return
        }

        const userId = req.user.id;

        try {
            const metadata = await getProfileImageMetadata(userId);

            res.status(200).json({
                success: true,
                message: 'Profile image metadata retrieved successfully',
                data: metadata
            });
        } catch (error: any) {
            if (error.message === 'Profile image not found') {
                res.status(404).json({
                    success: false,
                    error: 'Profile image not found'
                });
                return
            }
            throw error;
        }
    } catch (error) {
        console.error('Get profile image metadata error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to retrieve profile image metadata'
        });
    }
};

/**
 * Deletes the profile image of the authenticated user
 * @param req Express request object containing authenticated user details
 * @param res Express response object
 * @returns Success message if deletion is successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if deletion operation fails
 */
export const handleDeleteProfileImage: Controller<null> = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
            return
        }

        const userId = req.user.id;

        try {
            await deleteProfileImage(userId);

            res.status(200).json({
                success: true,
                message: 'Profile image deleted successfully',
                data: null
            });
        } catch (error: any) {
            // Prisma throws a specific error when record is not found
            if (error.code === 'P2025') {
                res.status(404).json({
                    success: false,
                    error: 'Profile image not found'
                });
                return
            }
            throw error;
        }
    } catch (error) {
        console.error('Delete profile image error:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to delete profile image'
        });
    }
};