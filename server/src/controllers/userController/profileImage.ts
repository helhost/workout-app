import { Request, Response } from 'express';
import {
    saveProfileImage,
    getProfileImage,
    getProfileImageMetadata,
    deleteProfileImage
} from 'src/services/userService';
import { Controller } from 'types';

/**
 * Uploads or updates the profile image of the authenticated user
 * @param req Express request object with user ID and image file
 * @param res Express response object
 * @returns Updated profile image metadata if successful
 * @throws 401 if user is not authenticated
 * @throws 400 if image file is missing or invalid
 * @throws 500 if upload operation fails
 */
export const handleUploadProfileImage: Controller = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({ error: 'Unauthorized' });
            return
        }

        const userId = req.user.id;

        // Make sure we have a file to upload
        if (!req.file) {
            res.status(400).json({ error: 'No image file provided' });
            return
        }

        // Extract file information
        const imageData = {
            id: '', // This will be generated by the service for new images
            filename: req.file.originalname,
            data: req.file.buffer,
            mimeType: req.file.mimetype,
            size: req.file.size
        };

        // Validate image type
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validImageTypes.includes(imageData.mimeType)) {
            res.status(400).json({
                error: 'Invalid image format. Supported formats: JPEG, PNG, GIF, WebP'
            });
            return
        }

        // Save the profile image
        const savedImage = await saveProfileImage(userId, imageData);

        res.status(200).json({
            message: 'Profile image uploaded successfully',
            profileImage: savedImage
        });
    } catch (error) {
        console.error('Profile image upload error:', error);
        res.status(500).json({ error: 'Failed to upload profile image' });
    }
};

/**
 * Retrieves the profile image of the authenticated user
 * @param req Express request object containing authenticated user details
 * @param res Express response object to send back the image data
 * @returns Profile image with binary data if successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if server encounters an error
 */
export const handleGetProfileImage: Controller = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({ error: 'Unauthorized' });
            return
        }

        const userId = req.user.id;

        try {
            const profileImage = await getProfileImage(userId);

            // Set appropriate headers for image delivery
            res.set('Content-Type', profileImage.mimeType);
            res.set('Content-Disposition', `inline; filename="${profileImage.filename}"`);

            // Send the binary image data
            res.send(profileImage.data);
        } catch (error: any) {
            if (error.message === 'Profile image not found') {
                res.status(404).json({ error: 'Profile image not found' });
                return
            }
            throw error;
        }
    } catch (error) {
        console.error('Get profile image error:', error);
        res.status(500).json({ error: 'Failed to retrieve profile image' });
    }
};

/**
 * Retrieves the metadata of the authenticated user's profile image
 * @param req Express request object containing authenticated user details
 * @param res Express response object
 * @returns Profile image metadata (without binary data) if successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if server encounters an error
 */
export const handleGetProfileImageMetadata: Controller = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({ error: 'Unauthorized' });
            return
        }

        const userId = req.user.id;

        try {
            const metadata = await getProfileImageMetadata(userId);

            res.status(200).json({
                message: 'Profile image metadata retrieved successfully',
                profileImage: metadata
            });
        } catch (error: any) {
            if (error.message === 'Profile image not found') {
                res.status(404).json({ error: 'Profile image not found' });
                return
            }
            throw error;
        }
    } catch (error) {
        console.error('Get profile image metadata error:', error);
        res.status(500).json({ error: 'Failed to retrieve profile image metadata' });
    }
};

/**
 * Deletes the profile image of the authenticated user
 * @param req Express request object containing authenticated user details
 * @param res Express response object
 * @returns Success message if deletion is successful
 * @throws 401 if user is not authenticated
 * @throws 404 if profile image is not found
 * @throws 500 if deletion operation fails
 */
export const handleDeleteProfileImage: Controller = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            res.status(401).json({ error: 'Unauthorized' });
            return
        }

        const userId = req.user.id;

        try {
            await deleteProfileImage(userId);

            res.status(200).json({
                message: 'Profile image deleted successfully'
            });
        } catch (error: any) {
            // Prisma throws a specific error when record is not found
            if (error.code === 'P2025') {
                res.status(404).json({ error: 'Profile image not found' });
                return
            }
            throw error;
        }
    } catch (error) {
        console.error('Delete profile image error:', error);
        res.status(500).json({ error: 'Failed to delete profile image' });
    }
};