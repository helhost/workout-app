generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Counter {
  id    Int @id @default(autoincrement())
  value Int
}

model User {
  id             String            @id @default(uuid())
  name           String
  email          String            @unique
  password       String
  bio            String?
  profilePicture String? // Profile picture URL
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  settings       UserSettings?
  measurements   UserMeasurements?
  profileImage   ProfileImage? // New relation to profile image
}

// New model for storing profile images
model ProfileImage {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename  String
  data      Bytes // Binary data of the image
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkMode               Boolean  @default(false)
  language               String   @default("en")
  defaultMeasurementUnit String   @default("metric") // "metric" or "imperial"
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// Main user measurements container
model UserMeasurements {
  id        String               @id @default(uuid())
  userId    String               @unique
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  weights   WeightMeasurement[]
  heights   HeightMeasurement[]
  bodyFats  BodyFatMeasurement[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

// Individual measurement types
model WeightMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float // Weight in kg
  date               DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([userMeasurementsId, date])
}

model HeightMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float // Height in cm
  date               DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([userMeasurementsId, date])
}

model BodyFatMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float // Body fat percentage
  date               DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([userMeasurementsId, date])
}
