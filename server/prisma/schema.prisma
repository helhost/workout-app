generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  name         String
  email        String            @unique
  password     String
  bio          String            @default("")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  settings     UserSettings?
  measurements UserMeasurements?
  profileImage ProfileImage?
  Workout      Workout[]
}

model ProfileImage {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename  String
  data      Bytes
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  darkMode               Boolean  @default(false)
  language               String   @default("en")
  defaultMeasurementUnit String   @default("metric")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model UserMeasurements {
  id        String               @id @default(uuid())
  userId    String               @unique
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  weights   WeightMeasurement[]
  heights   HeightMeasurement[]
  bodyFats  BodyFatMeasurement[]
  updatedAt DateTime             @updatedAt
}

model WeightMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float
  createdAt          DateTime         @default(now())

  @@index([userMeasurementsId, createdAt])
}

model HeightMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float
  createdAt          DateTime         @default(now())

  @@index([userMeasurementsId, createdAt])
}

model BodyFatMeasurement {
  id                 String           @id @default(uuid())
  userMeasurementsId String
  userMeasurements   UserMeasurements @relation(fields: [userMeasurementsId], references: [id], onDelete: Cascade)
  value              Float
  createdAt          DateTime         @default(now())

  @@index([userMeasurementsId, createdAt])
}

model Workout {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  startTime DateTime?
  endTime   DateTime?
  notes     String?
  completed Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercises Exercise[]
  supersets Superset[]

  @@index([userId, startTime])
}

model Exercise {
  id          String        @id @default(uuid())
  name        String
  muscleGroup MuscleGroup
  notes       String?
  sets        ExerciseSet[]
  dropsets    Dropset[] // New relation to dropsets
  workoutId   String?
  workout     Workout?      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  supersetId  String?
  superset    Superset?     @relation(fields: [supersetId], references: [id], onDelete: Cascade)
  order       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([workoutId])
  @@index([supersetId])
}

// Regular Exercise Set
model ExerciseSet {
  id         String   @id @default(uuid())
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  weight     Float
  reps       Int
  notes      String?
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([exerciseId])
}

// New Dropset model as an alternative to ExerciseSet
model Dropset {
  id         String          @id @default(uuid())
  exerciseId String
  exercise   Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  notes      String?
  order      Int // Order within the exercise
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  subSets    DropsetSubSet[] // The actual sets in the dropset

  @@index([exerciseId])
}

// SubSets within a dropset
model DropsetSubSet {
  id        String   @id @default(uuid())
  dropsetId String
  dropset   Dropset  @relation(fields: [dropsetId], references: [id], onDelete: Cascade)
  weight    Float
  reps      Int
  order     Int // Order within the dropset sequence
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dropsetId])
}

model Superset {
  id        String     @id @default(uuid())
  workoutId String
  workout   Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  notes     String?
  exercises Exercise[]
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([workoutId])
}

enum MuscleGroup {
  chest
  back
  shoulders
  biceps
  triceps
  legs
  quads
  core
  cardio
  fullBody
}
